#+Title: Why ownership?
#+Subtitle: ‚ò≠‚ò≠‚ò≠
#+SETUPFILE: ../reveal.setup

* Fundamental design

  + Every value has exactly **one owner**
  + Memory is cleaned up by the **owner**
  + Ownership can be passed on
  + Memory may be borrowed (according to rules)
  + Memory can't be cleaned up if borrowed

* _These rules are a fundamental part of the Rust type system_

* Example

  We create a ~Dot~ and let pacman eat it.  nom nom nom!
  
  #+BEGIN_SRC rust
    #[derive(Debug)]
    struct Dot {
        x: i64,
        y: i64,
    }
    
    fn main() {
        let dot = Dot { x: 2, y: 1 };
    
        pacman(dot);
    }
    
    fn pacman(dot: Dot) {
        println!("Eating {:?}", dot);
    }
  #+END_SRC

* Quiz #1

  What happens if we call '~pacman(dot)~' twice?
  
  #+BEGIN_SRC rust
    #[derive(Debug)]
    struct Dot {
        x: i64,
        y: i64,
    }
    
    fn main() {
        let dot = Dot { x: 2, y: 1 };
        pacman(dot);
        pacman(dot);
    }
    
    fn pacman(dot: Dot) {
        println!("Eating {:?}", dot);
    }
  #+END_SRC

* Quiz #1 - Answer

  When we call ~pacman~ ownership is moved. When ~pacman~ function ends the value is dropped.
  
  #+BEGIN_SRC dot :file imgs/gen/move-owner.png :cmdline -Kdot -Tpng
    digraph {
        node [shape=box, fontsize=24, margin="0.25,0.25"]
        rankdir = "LR"
    
        main [color=darkgreen, shape=box]
        pacman [color=darkgreen, shape=box]
        üóëÔ∏è [color=red, shape=box]
        main -> pacman -> üóëÔ∏è;
    }
  #+END_SRC

  #+RESULTS:
  [[file:imgs/gen/move-owner.png]]

* Cloning technology

  To get around this, we can explicitly clone ~Dot~!

  #+BEGIN_SRC rust
    #[derive(Debug, Clone)] // <-- implement Clone
    struct Dot {
        x: i64,
        y: i64,
    }
    
    fn main() {
        let dot = Dot { x: 2, y: 1 };
        pacman(dot.clone()); // <-- Clone 'dot'
        pacman(dot);
    }
    
    fn pacman(dot: Dot) {
        println!("Eating {:?}", dot);
    }
  #+END_SRC

* Cloning technology
    
  #+BEGIN_SRC dot :file imgs/gen/clone-move.png :cmdline -Kdot -Tpng
      digraph {
          node [shape=box, fontsize=24, margin="0.25,0.25"]
          rankdir = "LR"
    
          main [color=darkgreen, shape=box]
          clone [color=teal, shape=box]
          pacman1 [label="pacman", color=darkgreen, shape=box]
          pacman2 [label="pacman", color=darkgreen, shape=box]    
          drop1 [label="üóëÔ∏è", color=red, shape=box]
          drop2 [label="üóëÔ∏è", color=red, shape=box]
          main -> pacman1 -> drop1;
          main -> clone -> pacman2 -> drop2;
      }
  #+END_SRC

  #+RESULTS:
  [[file:imgs/gen/clone-move.png]]

* Cloning is always a deep-clone and _can_ become costly!

* ~Copy~ vs ~Clone~

  Alternatively types can implement ~Copy~.  This is meant for data
  that can be quickly copied in-memory (using ~memcopy~) and are
  allowed to be copied.

  #+BEGIN_SRC rust
    #[derive(Copy, Clone, Debug)] // <-- Add both Copy _and_ Clone here
    struct Dot { x: i64, y: i64 }
    
    fn main() {
        let dot = Dot { x: 2, y: 1 };
        pacman(dot); // <-- Implicitly copy dot here
        pacman(dot);    
    }
    
    fn pacman(dot: Dot) {
        println!("Eating {:?}", dot);
    }
  #+END_SRC

  Important: ~Copy~ is just a marker trait. A ~Copy~ type must still
  implement ~Clone~!
  
* Quiz #2

  What happens if we call ~use_file~ twice?

  #+BEGIN_SRC rust
    use std::fs::File;
    
    fn main() {
        let f = File::open("/dev/zero").unwrap();
    
        use_file(f);
        use_file(f);
    }
    
    fn use_file(f: File) {
        // ... do some stuff
    }
  #+END_SRC
  
* Quiz #3

  How is ~core::mem::drop~ implemented?
  
  #+BEGIN_SRC rust
    use std::fs::File;
    
    fn main() {
        let f = File::open("/dev/zero").unwrap();
        drop(f);
    
        // 'f' no longer available!
    }
  #+END_SRC

* Quiz #3 - Answer

  + ~drop(...)~ takes ownership of any generic type
  + Then does absolutely nothing
  + ~rustc~ will ( _at compile time_ ) insert statements to free memory
    at the end of this function scope
  
  #+BEGIN_SRC rust
    #[inline]
    fn drop<T>(_x: T) {
        // take ownership, drop out of scope
    }
  #+END_SRC

* Ownership scopes

  + An owning type
  + An owning function
  + An owning ~{ }~ scope

  #+BEGIN_SRC rust
    struct MyStruct {
        // They who own MyStruct control the String
        txt: String,
    }
    
    fn function_scope() {
        let s = String::from("Hello function"); println!("{}", s);
        // s goes out of scope here
    
        {
            let s2 = String::from("Hello scope"); println!("{}", s2);
            // s2 goes out of scope here
        }
    }
  #+END_SRC

* In conclusion

  + Ownership allows the compiler to _reason about our code_
    + This is good
  + Ownership places _restrictions and limitations_ on our code
    + This is bad
    + ...or is it?
  
  [[file:README.org][Back to index]]
